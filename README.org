#+TITLE: Shop Database
* What is it?
This projects creates and implements a database for useful
purposes. In this case a mock project acting as a storefront for a company,
Generic Co.
* Why is it?
This project is created for the purpose of an assessment, for credits
* Ethics
The information you find on the website isn't all mine, however has been checked
to ensure that I am not infringing on any ethical issues
- Product Trademarks ::
  This programs demonstration database contains products whose names are under
  trademark. This is acceptable in this case as it neither dilutes, defames or
  misrepresents the products in question, legally speaking I do not need to
  consult the companies to use the product trademarks in my work, provided I use
  the trademarks respectfully.
- Product Prices ::
  The product prices are sourced from [[http://pricespy.co.nz/][PriceSpy]], however the prices do not belong
  to PriceSpy itself. Considering that no one actually owns the prices, I see no
  ethical issues with using them.
- Product Images ::
  The images themselves /are/ subject to copyright, however I was careful to filter
  these images for those labelled for noncommercial reuse. This project is not being
* How does it work?
The project contains two parts, the database and the web server code. The
database backend is a simple sqlite server that follows the following schema

#+NAME: database-diagram
#+CAPTION: Database Diagram
[[file:diagram.png]]

This is plugged into a web server that serves the available products to browse
and search. The entire web server, including served html, is written in Common
Lisp. The reason for this is because Lisp gives me greater flexibility and
control over the served data and the[[http://weitz.de/cl-who/][ cl-who]] package gives great power with
respect to HTML. The[[https://github.com/slime/slime.git][ Slime]] REPL also allows the ability to change aspects of the
server without shutting off or requiring complex monkey patching.
** Backend design
The backend has been thoroughly planned and tested.

#+NAME: backend-diagram
#+CAPTION: Backend Diagram
[[file:serverflowdiagram.png]]
* Testing

Well commented tests are found in the =test/database.lisp= file, and can be run
from any repl by quickloading the package, and running =(asdf:test-system
:shopdb)=.


For convenience sake I have include the results of a test from the master branch
#+BEGIN_EXAMPLE
Running a test file '/home/jake/quicklisp/local-projects/shopdb/test/database.lisp'
1..7

 category? tests
   Expected behaviour: return true for any word that follows the pattern +word, e.g +hello, but not + hello or hello or simply +
   Testing positive case
    ✓ T is expected to be T
   Testing negative easy case
    ✓ T is expected to be T
   Testing empty category case
    ✓ T is expected to be T
   Testing whitespace category case
    ✓ T is expected to be T
 separate test
   Testing only positive case
   Expected behaviour: split a word by spaces
    ✓ ("Hello" "World") is expected to be ("Hello" "World")
 string-cdr test
   Testing only positive case
    ✓ "ello" is expected to be "ello"
 build-sql-query tests
   Expected behaviour: build the appropriate sql query for searching the database when the given query specifies categories and when it doesn't
   Testing case WITH categories
    ✓ "SELECT id, name, price, description FROM shop LEFT JOIN categories ON (shop.id = categories.shop_id) WHERE ((shop.name LIKE ?) AND (categories.category IN (?))) ORDER BY price DESC, name ASC" is expected to be "SELECT id, name, price, description FROM shop LEFT JOIN categories ON (shop.id = categories.shop_id) WHERE ((shop.name LIKE ?) AND (categories.category IN (?))) ORDER BY price DESC, name ASC"
   Testing case WITHOUT categories
    ✓ "SELECT id, name, price, description FROM shop LEFT JOIN categories ON (shop.id = categories.shop_id) WHERE (shop.name LIKE ?) ORDER BY price DESC, name ASC" is expected to be "SELECT id, name, price, description FROM shop LEFT JOIN categories ON (shop.id = categories.shop_id) WHERE (shop.name LIKE ?) ORDER BY price DESC, name ASC"
 parse-search tests
   Expected behaviour: parse a query into it's keyword and categories
   Testing case WITH categories
    ✓ (:SEARCH ("intel") :CATEGORIES ("cpu")) is expected to be (:SEARCH ("intel") :CATEGORIES ("cpu"))
   Testing case WITHOUT categories
    ✓ (:SEARCH ("intel") :CATEGORIES NIL) is expected to be (:SEARCH ("intel") :CATEGORIES NIL)
 run-db-search tests
   Expected behaviour: Run database search
   Testing case WITH categories
    ✓ ((2
  "Intel Core i5-4690K Devil's Canyon Quad-Core 3.5 GHz LGA 1150 88W BX80646I54690K Desktop Processor Intel HD Graphics 4600"
  337.0d0 "Haswell
Unlocked Multiplier
Turbo Boost")) is expected to be ((2
  "Intel Core i5-4690K Devil's Canyon Quad-Core 3.5 GHz LGA 1150 88W BX80646I54690K Desktop Processor Intel HD Graphics 4600"
  337.0d0 "Haswell
Unlocked Multiplier
Turbo Boost"))
   Testing case WITHOUT categories
    ✓ ((2
  "Intel Core i5-4690K Devil's Canyon Quad-Core 3.5 GHz LGA 1150 88W BX80646I54690K Desktop Processor Intel HD Graphics 4600"
  337.0d0 "Haswell
Unlocked Multiplier
Turbo Boost")) is expected to be ((2
  "Intel Core i5-4690K Devil's Canyon Quad-Core 3.5 GHz LGA 1150 88W BX80646I54690K Desktop Processor Intel HD Graphics 4600"
  337.0d0 "Haswell
Unlocked Multiplier
Turbo Boost"))
 get-product-for tests
   Expected behaviour: retrieve a product from the database matching an id
   Test case WITH valid id
    ✓ (2
 "Intel Core i5-4690K Devil's Canyon Quad-Core 3.5 GHz LGA 1150 88W BX80646I54690K Desktop Processor Intel HD Graphics 4600"
 337.0d0 "Haswell
Unlocked Multiplier
Turbo Boost") is expected to be (2
 "Intel Core i5-4690K Devil's Canyon Quad-Core 3.5 GHz LGA 1150 88W BX80646I54690K Desktop Processor Intel HD Graphics 4600"
 337.0d0 "Haswell
Unlocked Multiplier
Turbo Boost")
   Test case WITHOUT valid id
    ✓ NIL is expected to be NIL

✓ 7 tests completed (44ms)
#+END_EXAMPLE
